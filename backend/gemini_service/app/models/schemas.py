from pydantic import BaseModel, Field
from typing import Optional, Dict, Any

class GeminiRequest(BaseModel):
    """
    Schema for requests to the Gemini service endpoint.
    """
    message: str = Field(..., description="The user message/prompt to send to Gemini.")
    system_message: Optional[str] = Field(None, description="Optional system message/instruction for the model.")
    model_name: Optional[str] = Field(None, description="Optional Gemini model name to use. Defaults to config.")
    # API Key will be handled via header

class GeminiResponse(BaseModel):
    """
    Schema for responses from the Gemini service endpoint.
    """
    result: str = Field(..., description="The text content generated by the Gemini model.")
    model_used: str = Field(..., description="The actual Gemini model name used for the generation.")

class HealthCheck(BaseModel):
    """
    Schema for the health check response.
    """
    status: str = "ok"
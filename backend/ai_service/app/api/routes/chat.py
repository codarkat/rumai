from fastapi import APIRouter, HTTPException, status, Header, Depends # Đã có Depends
from typing import Optional
from app.models.schemas import ChatRequest, ChatResponse
from app.services.gemini import GeminiService
from app.core.config import get_settings
from app.core.security import verify_token # <<< Import hàm verify_token
# from app.models.user import User # Có thể cần nếu dùng thông tin user chi tiết

router = APIRouter()
settings = get_settings()

@router.post(
    # Giữ nguyên path, response_model, summary
    "/chat/generate-text", # Giữ nguyên endpoint để tránh breaking change API
    response_model=ChatResponse,
    summary="Generate Text Response using Gemini model (Auth Required)", # Cập nhật summary
    responses={
        status.HTTP_400_BAD_REQUEST: {"description": "Bad request, such as invalid parameters"},
        status.HTTP_401_UNAUTHORIZED: {"description": "Authentication required or invalid token"}, # Cập nhật mô tả 401
        status.HTTP_403_FORBIDDEN: {"description": "Permission denied for the operation"},
        status.HTTP_429_TOO_MANY_REQUESTS: {"description": "Quota or rate limit exceeded"},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {"description": "Internal server error"},
        status.HTTP_503_SERVICE_UNAVAILABLE: {"description": "Service temporarily unavailable or Auth service unavailable"} # Cập nhật mô tả 503
    }
)
async def generate_chat_response(
    request_body: ChatRequest,
    x_google_api_key: Optional[str] = Header(None, alias="X-Google-API-Key"),
    current_user: dict = Depends(verify_token) # <<< Thêm dependency xác thực
):
    """
    Receives a user message and optional chat history, then returns
    a text response generated by the Gemini model.
    """
    try:
        # Sử dụng API key từ header nếu có, nếu không sẽ dùng từ settings
        api_key = x_google_api_key or settings.GOOGLE_AI_STUDIO_API_KEY
        
        if not api_key:
             # Nên có kiểm tra key tồn tại và trả lỗi rõ ràng
             raise HTTPException(status_code=500, detail="Gemini API key is not configured on the server.")

        # Initialize the Gemini service
        gemini_service = GeminiService(api_key=api_key)
        
        # Generate a response
        response_text, model_used = await gemini_service.generate_text_response(
            message=request_body.message,
            history=request_body.history,
            model=request_body.model
        )
        
        return ChatResponse(
            response_text=response_text,
            model_used=model_used
        )
    except HTTPException as http_exc:
        # Re-raise HTTPExceptions raised by the service
        raise http_exc
    except Exception as e:
        # Catch any other unexpected errors during chat generation
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"An unexpected error occurred during chat generation: {e}"
        )